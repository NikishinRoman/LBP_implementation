%implement multiscale LBP
%% read in videos
% initialize
XtrTemp = [];
XtsTemp = [];
folderMain = '/media/ewa/SH/3dmadDirectories/';
 f = 3
folderEnd = ['Data0' num2str(f) 'Keep/'];
fileNameList = dir([[folderMain folderEnd] [ '*.avi']]); 
    for i =1:length(fileNameList)
        imgCells{i} = fileNameList(i).name;  
    end
  [cs,index] = sort_nat(imgCells,'ascend');
    img_names = cs;
   for m = 1:length(fileNameList)
       try
            vidName = img_names{m};       
            % read in the videos
            v = VideoReader([folderMain folderEnd vidName]);
            videoLength = v.Duration;
            videoRate = v.FrameRate;
            numFrame = videoLength*videoRate;
            width = v.Width;
            height = v.Height; 
            frames = read(v);

    load(['../Data/3DMAD1stFrame/Data0' num2str(f) 'Dlib/dLib-' vidName(1:end-4) '_C.avi' '.png.mat'])
    firstPoints = pointsResized;

%% grayscale img
% convert each video to a grayscale image 
img = frames(:,:,:,1);
imgG = rgb2gray(img);
%% crop face ROI and resize
% they don't say which face detection they use
minFaceW = min(firstPoints(:,1));
maxFaceW = max(firstPoints(:,1));
minFaceH = min(firstPoints(:,2));
maxFaceH = max(firstPoints(:,2));

faceW = maxFaceW - minFaceW;
faceH = maxFaceH - minFaceH;
imgG_i = imgG(:,:,1);
I_1 = imcrop(imgG_i, [minFaceW minFaceH faceW faceH]);

I = imresize(I_1, [64 64]);  % stretch aspect ratio???
%% global LBP
% for each image
% get a resulting global LBP face image 
R1 = 1;
N1 = 8;
MAPPING1=getmapping(8,'u2');
MODEimg = i;
% how to make it output an LBP Image instead ogf a feature vector - use i
% for MODE
LBP_img = lbp(I,R1,N1,MAPPING1,MODEimg);

MODE = 'hist';
H_u2_8_1 = [];
% counter = 0;
% divide into overlapping 3x3 regions - LBP_img or I?
% [row col]=size(LBP_img);
% for i=1:3:row-2
%      for j = 1:3:col-2
%        I_3x3=LBP_img(i:(i+2), j:(j+2));  % 3x3 overlap regions inside the LBP image
%      LBP_img3x3 = lbp(I_3x3,R1,N1,MAPPING1,MODE);
% % each region should give 59-bin histogram - combine to end up with
% % 531-bin, 9 3x3 ROIs
%  % concatenate
%  H_u2_8_1 = [H_u2_8_1 LBP_img3x3];        % wrong length
% counter = counter +1;
%     end
% end

% makes counter = 9?
[row col]=size(LBP_img);
counter = 0;
for i=10:20:row-9
     for j = 10:20:col-9
       I_3x3=LBP_img(j-9:j+9,i-9:i+9)  ;     
       LBP_img3x3 = lbp(I_3x3,R1,N1,MAPPING1,MODE);
        H_u2_8_1 = [H_u2_8_1 LBP_img3x3];
       counter = counter +1;
    end
end

% repeat LBP but on the whole face ROI
N2 = 8;
R2 = 2;
H_u2_8_2 = lbp(I,R2,N2,MAPPING1,MODE);

MAPPING2=getmapping(16,'u2');
N3 = 16;
H_u2_16_2 = lbp(I,R2,N3,MAPPING2,MODE);

LBP_finalVec = [H_u2_8_1 H_u2_8_2 H_u2_16_2]; % does the order matter?
% feature vector for each observation (img)
% total number of histogram bins should be 833 = 531+59+243
if f ==2 % tr
    XtrTemp = [Xtr; LBP_finalVec];
elseif f==3
    XtsTemp = [XtsTemp; LBP_finalVec];
end
       catch 
           continue
       end
end
%% prepare data for SVM
% save the LBP vectors into an observation-feature matrix, separately for
% XtrTemp and XtsTemp

% add labels
YtrTemp = ones(size(XtrTemp,1),1);
YtsTemp = zeros(size(XtsTemp,1),1);

% shuffle, keep the shuffle order 
XYTrTemp = [XtrTemp YtrTemp];
XYTsTemp = [XtsTemp YtsTemp];

XYTemp = [XYTrTemp; XYTsTemp];
s = RandStream('mt19937ar','Seed',sum(100*clock));
% train

orderTri = randperm(s, size(XYTrTemp,1));
XYtr = XYTrTemp(orderTri,:);
% keep the order after shuffling
[~,orderTr] = sort(orderTri);    % keep to unshuffle
% XYtr_ordered = XYtr(orderTr, :);

% test
orderTsi = randperm(s, size(XYTsTemp,1));
XYts = XYTsTemp(orderTsi,:);
% keep the order after shuffling
[~,orderTs] = sort(orderTsi);    % keep to unshuffle
% XYtr_ordered = XYtr(orderTr, :);


% split into X and Y - tr and ts
Xtr = XYtr(:,1:end-1);
Xts = XYts(:,1:end-1);
Ytr = XYTrTemp(:,end);
Yts = XYts(:,end);

%% SVM
% tr - 1743 real imgs and 1748 imposter images (fake and live of the same person)
% ts - 3362 real and 5761 imposter 

SVMModel = fitcsvm(Xtr,Ytr,'KernelFunction','rbf','Standardize',true);

[label,score] = predict(SVMModel,Xts);
predictionSVM = (length(find(label==Yts))/length(Yts))*100;
% disp([num2str(prediction) '% accuracy']);
% predictionAllSVM = [predictionAllSVM; predictionSVM]; 

%% Error computation


